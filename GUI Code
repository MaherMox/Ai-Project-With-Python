import tkinter as tk
from tkinter import messagebox
from backtracking import solve_backtracking
from best_first import solve_best_first
from hill_climbing import solve_hill_climbing
from genetic import solve_genetic


def draw_board(canvas, solution, n):
    canvas.delete("all")
    cell_size = min(500 // n, 60)
    board_size = cell_size * n
    offset_x = (500 - board_size) // 2
    offset_y = (500 - board_size) // 2

    for i in range(n):
        for j in range(n):
            x1 = offset_x + j * cell_size
            y1 = offset_y + i * cell_size
            x2 = x1 + cell_size
            y2 = y1 + cell_size
            color = "#D3D3D3" if (i + j) % 2 == 0 else "#A9A9A9"
            canvas.create_rectangle(x1, y1, x2, y2, fill=color)
            if solution[i] == j:
                canvas.create_text(
                    x1 + cell_size // 2,
                    y1 + cell_size // 2,
                    text="♛",
                    font=("Arial", int(cell_size * 0.6)),
                    fill="#8B0000"
                )


def solve():
    try:
        n = int(entry.get())
        if n < 4 or n > 100:
            raise ValueError
    except ValueError:
        messagebox.showerror("Invalid Input", "Enter a number N (4 ≤ N ≤ 100).")
        return

    method = method_choice.get()
    solution = None

    if method == "Backtracking":
        results = solve_backtracking(n)
        solution = results[0] if results else None
    elif method == "Best-First":
        solution = solve_best_first(n)
    elif method == "Hill Climbing":
        solution = solve_hill_climbing(n)
    elif method == "Genetic":
        solution = solve_genetic(n)
    else:
        messagebox.showerror("Error", "Invalid solving method selected.")
        return

    if solution:
        draw_board(canvas, solution, n)
    else:
        messagebox.showinfo("No Solution", "No valid solution found with this method.")


root = tk.Tk()
root.title("N-Queens Solver")

tk.Label(root, text="Enter Board Size N (≥ 4):").pack(pady=5)
entry = tk.Entry(root)
entry.pack(pady=5)
entry.insert(0, "8")

tk.Label(root, text="Select Solving Method:").pack(pady=5)
method_choice = tk.StringVar(value="Backtracking")
tk.OptionMenu(
    root,
    method_choice,
    "Backtracking",
    "Best-First",
    "Hill Climbing",
    "Genetic"
).pack(pady=5)

tk.Button(root, text="Solve", command=solve).pack(pady=10)

canvas = tk.Canvas(root, width=500, height=500)
canvas.pack(pady=10)

root.mainloop()
